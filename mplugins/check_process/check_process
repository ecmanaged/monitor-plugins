#!/usr/bin/env python

import sys
sys.path.append('../../../plugins')

from __mplugin import MPlugin
from __mplugin import OK, CRITICAL, TIMEOUT

import re
import psutil

from time import time


class CheckProcess(MPlugin):
    def run(self):
        process = self.config.get('process')

        if not process:
           self.exit(CRITICAL, message="Invalid process")

        count = 0
        total_rss = 0
        total_vms = 0
        threads = 0
        
        regex = None
        if self._is_regex_like(process):
            regex = self._regex_clean(process)
        
        for p in psutil.process_iter():
            matched = None
            if regex:
                if re.search(regex,p.name):
                    matched = p.pid
                    count +=1
            else:
                name = p.name.split(' ')[0]
                if name == process:
		    matched = p.pid
                    count += 1
                   
	    if matched:
	        proc = psutil.Process(matched)
                mem = proc.get_memory_info()
                total_rss += mem.rss
                total_vms += mem.vms
                threads += proc.get_num_threads()
                create_time = proc.create_time
	        uids = proc.uids
	        gids = proc.gids
	        status = proc.status
	        nice = proc.nice
	        
        if count:
            data = {
                'count': count,
                'threads': threads,
                'memory_rss': self._to_mb(total_rss),
    	        'memory_vms': self._to_mb(total_vms),
	        'create_time': time() - create_time,
    	        'uids': uids,
	        'gids': gids,
                'status': status,
	        'nice': nice
            }
            metrics = {
                'count': count,
                'threads': threads,
                'memory_rss': self._to_mb(total_rss),
                'memory_vms': self._to_mb(total_vms)
            }
            
            self.exit(OK,data,metrics)
        
        self.exit(CRITICAL,message="Process not found")
        
    @staticmethod
    def _is_regex_like(string):
        if string.startswith('/') and string.endswith('/'):
            return True    
            
        return False
        
    @staticmethod
    def _regex_clean(string):
        # Clean starting and ending slash
        string = re.sub(r'(^\/)', r'', string)
        string = re.sub(r'(\/$)', r'', string)
        return string


monitor = CheckProcess()
monitor.run()
