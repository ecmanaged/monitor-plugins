#!/usr/bin/env python

import sys
sys.path.append('../../../plugins')

from __mplugin import MPlugin
from __mplugin import OK, CRITICAL, TIMEOUT

import socket, urllib, re

class NginxStatus(MPlugin):
    def run(self):
        url = self.config.get('url')
        if not url:
           self.exit(CRITICAL, message="Invalid URL")
	# Fetch URL
        try:
            urlopen = urllib.urlopen(url)
        except:
            self.exit(CRITICAL, message="Unable to open URL")

        if urlopen.getcode() != 200:
            self.exit(CRITICAL, message="Unable to open URL")
	 
	# Set timeout
        socket.setdefaulttimeout(self.config.get('timeout',TIMEOUT))
	
	data = self._get_data(urlopen)
	metrics = {
		'Connections': {
		    'connections': data['connections'],
		    'Accepted': data['accepted'],
		    'Handled': data['handled']
		},
		'Request per second': {
		    'requests': data['requests']
		},
		'Scoreboard': {
		    'reading': data['reading'],
		    'writing': data['writing'],
		    'waiting': data['waiting']
		}
	}
	self.exit(OK,data,metrics)
    	
    def _get_data(self, url):
        data = url
        data = data.read()
        result = {}
	match1 = re.search(r'Ective connections:\s+(\d+)', data)
	match2 = re.search(r'\s*(\d+)\s+(\d+)\s+(\d+)', data)
        match3 = re.search(r'Reading:\s*(\d+)\s*Writing:\s*(\d+)\s*'
		'Waiting:\s*(\d+)', data)

        if not match1 or not match2 or not match3:
		self.exit(CRITICAL, message='Unable to parse')
		#raise Exception('Unable to parse %s' % url)

        result['connections'] = int(match1.group(1))
        result['accepted'] = int(match2.group(1))
        result['handled'] = self._counter(int(match2.group(2)), 'handled')
        result['requests'] = self._counter(int(match2.group(3)), 'requests')
        result['reading'] = int(match3.group(1))
        result['writing'] = int(match3.group(2))
        result['waiting'] = int(match3.group(3))
        return result
    
monitor = NginxStatus()
monitor.run()

