#!/usr/bin/env python

import sys, subprocess 
sys.path.append('../../../plugins')

from __mplugin import MPlugin
from __mplugin import OK, CRITICAL, TIMEOUT

class VarnishStatus(MPlugin):
    def run(self):
        try:
            varnishstat = subprocess.Popen('which varnishstat', shell=True, stdout=subprocess.PIPE).stdout.read()
        except:
            self.exit(CRITICAL, message='varnishstat not found')

        try:
            raw_data = subprocess.Popen('varnishstat -1 -j', shell=True, stdout=subprocess.PIPE).stdout.read()
        except:
            self.exit(CRITICAL, message='varnishstat not found')

        data = self._parse_data(raw_data)
        metrics = {
            'Conections': {
               'client_conn': data['client_conn'],
               'client_req': data['client_req'],
               'backend_fail': data['backend_fail'],
               'cache_miss': data['cache_miss']
            },
            'Workers': {
               'n_wrk': data['n_wrk'],
               'n_wrk_create': data['n_wrk_create'],
               'n_wrk_failed': data['n_wrk_failed'],
               'n_wrk_max': data['n_wrk_max'],
               'n_wrk_drop': data['n_wrk_drop']
            },
            'Expired Objects': {
               'n_expired': data['n_expired']
            }
        }

        self.exit(OK,data,metrics)

    def _parse_data(self, raw):
        parsed = {}
        decoded = self._from_json(raw)
        for key in decoded.keys():
            if key == 'timestamp':
                pass
            else:
                parsed[key] = self._counter(decoded[key]['value'],key)

        return parsed
    
monitor = VarnishStatus()
monitor.run()
