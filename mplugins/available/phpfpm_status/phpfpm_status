#!/usr/bin/env python

import sys, socket, urllib, re
sys.path.append('../../../plugins')

from __mplugin import MPlugin
from __mplugin import OK, CRITICAL, TIMEOUT

class PHPfpmStatus(MPlugin):
    def run(self):
        url = self.config.get('url')

        # Verify URL
        if not url:
            self.exit(CRITICAL, message="Invalid URL")

        if (re.search("\?html$", url)) or re.search("\?xml$", url) or re.search("\?full$", url) or (re.search("\&full$", url)):
            self.exit(CRITICAL, message="Invalid URL, we accept url like this domain.com?json")
        
        elif not re.search("\?json$", url):
            url = url + '?json'
            
        # Set timeout
        timeout = self.config.get('timeout',TIMEOUT)
        socket.setdefaulttimeout(int(timeout))
            
        # Fetch URL
        try:
            urlopen = urllib.urlopen(url)
        except:
            self.exit(CRITICAL, message="Unable to open URL")

        if urlopen.getcode() != 200:
            self.exit(CRITICAL, message="Unable to open URL")
    
        data = self._parse_data(urlopen)
        metrics = {
            'Connections': {
                'accepted conn': self._counter(data['accepted conn'],'accepted conn')
            },
            'Processes': {
               'idle processes': data['idle processes'],
               'active processes': data['active processes'],
               'total processes': data['total processes']
            }
        }
        
        self.exit(OK,data,metrics)
        
    def _parse_data(self, url):
        url = url.read()
        parsed = {}
        decoded = self._from_json(url)
        
        for key in decoded.keys():
            if key != 'pool' and key != 'process manager' and key != 'start time':
                parsed[key] = decoded[key] 

        return parsed
    
monitor = PHPfpmStatus()
monitor.run()
